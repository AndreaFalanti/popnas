import argparse
import os

import numpy as np
from PIL import Image


def main(ds_folder: str):
    '''
    Generate a segmentation dataset format easily readable by POPNAS.
    Requires RGB images and masks (which should be converted using the other script).

    Args:
        ds_folder: dataset folder of a single split. It should contain two subfolders: one named 'images', containing RGB images used as samples,
         and one named 'masks_onehot', generated by convert_segmentation_masks script.
    '''
    image_folder = os.path.join(ds_folder, 'images')
    image_files = [f for f in os.scandir(image_folder) if f.is_file()]  # type: list[os.DirEntry]

    numpy_masks_file_path = os.path.join(ds_folder, 'masks.npz')
    masks_np = np.load(numpy_masks_file_path)

    # lists that will contain the numpy arrays for samples and masks
    X, Y = [], []

    for img_entry in image_files:
        with Image.open(img_entry.path) as img:
            # append numpy array of RGB image
            X.append(np.asarray(img))

        # filename without extension
        npz_key = img_entry.name.split('.')[0]
        Y.append(masks_np[npz_key])

    save_name = os.path.basename(ds_folder)
    # arrays could be ragged (different image shapes), so use object as dtype
    np.savez_compressed(os.path.join(ds_folder, save_name), x=np.asarray(X, dtype=object), y=np.asarray(Y, dtype=object))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="")
    parser.add_argument('-p', metavar='FOLDER_PATH', type=str, help="path to dataset split to convert", required=True)
    args = parser.parse_args()

    main(args.p)